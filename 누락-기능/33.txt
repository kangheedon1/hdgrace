<settings>
  <MaxThreads>500</MaxThreads>
  <ParallelExecution>true</ParallelExecution>
  <BrowserPoolSize>500</BrowserPoolSize>
</settings>
<settings>
  <MaxThreads>500</MaxThreads>
  <ThreadDelay>100</ThreadDelay>
</settings>
<settings>
  <ParallelExecution>true</ParallelExecution>
</settings>
<!-- UI 요소로 모니터링 가능 -->
<div class="monitoring-panel">
  <div class="thread-status">쓰레드 수: 500</div>
  <div class="proxy-status">사용 중 프록시: 480</div>
  <div class="account-status">로그인 계정: 495</div>
</div>
<!-- 실시간 모니터링 패널 -->
<div id="realtime-monitor">
  <h3>실시간 모니터링</h3>
  <div>현재 실행 쓰레드: <span id="active-threads">0</span></div>
  <div>실패한 작업: <span id="failed-jobs">0</span></div>
  <div>사용 중 프록시: <span id="used-proxies">0</span></div>
</div>
// JavaScript로 실시간 모니터링
function updateMonitoringPanel() {
  // 쓰레드 상태 업데이트
  document.getElementById('active-threads').textContent = getActiveThreads();
  // 프록시 상태 업데이트
  document.getElementById('used-proxies').textContent = getUsedProxies();
  // 오류 상태 업데이트
  document.getElementById('failed-jobs').textContent = getFailedJobs();
}
<settings>
  <EnableRealtimeMonitoring>true</EnableRealtimeMonitoring>
  <LogLevel>INFO</LogLevel>
  <AlertThreshold>5</AlertThreshold>
</settings>
<logging>
  <LogFile>logs/monitoring.log</LogFile>
  <MaxFileSize>100MB</MaxFileSize>
  <BackupCount>5</BackupCount>
</logging>
<macro name="SearchAndWatchLiveStream">
  <!-- 1. 유튜브 앱 열기 -->
  <action name="OpenApp">
    <AppName>YouTube</AppName>
  </action>

  <!-- 2. 검색 창에 키워드 입력 -->
  <action name="Type">
    <Selector>input[placeholder='검색']</Selector>
    <Text>{TargetKeyword}</Text>
  </action>

  <!-- 3. 필터 설정: 실시간 라이브 스트리밍 선택 -->
  <action name="Click">
    <Selector>button[aria-label='필터']</Selector>
  </action>
  <action name="Click">
    <Selector>span[text()='실시간']</Selector>
  </action>

  <!-- 4. 첫 번째 라이브 스트리밍 선택 -->
  <action name="WaitFor">
    <Selector>a[href*='/live/']</Selector>
    <Timeout>10000</Timeout>
  </action>
  <action name="Click">
    <Selector>a[href*='/live/']</Selector>
  </action>

  <!-- 5. 라이브 스트리밍 시청 중 상호작용 -->
  <action name="Delay">
    <Min>5000</Min>
    <Max>10000</Max>
  </action>
  <action name="Type">
    <Selector>textarea[placeholder='댓글을 입력하세요.']</Selector>
    <Text>{RandomLine('./data/comments.txt')}</Text>
  </action>
  <action name="Click">
    <Selector>button[type='submit'][aria-label='전송']</Selector>
  </action>
  <action name="Click">
    <Selector>button[aria-label='좋아요']</Selector>
  </action>

  <!-- 6. 인간적인 행동 시뮬레이션 -->
  <action name="MouseMove">
    <X>{Random(100, 800)}</X>
    <Y>{Random(200, 600)}</Y>
    <Duration>500</Duration>
  </action>
  <action name="Scroll">
    <Distance>{Random(100, 500)}</Distance>
    <Duration>1000</Duration>
  </action>
  <If condition="{Random(1,100)} > 70">
    <Then>
      <action name="ExecuteJS">
        <Code>document.querySelector('video').pause()</Code>
      </action>
      <action name="Delay">
        <Min>5</Min>
        <Max>15</Max>
      </action>
      <action name="ExecuteJS">
        <Code>document.querySelector('video').play()</Code>
      </action>
    </Then>
  </If>
</macro>
<!-- UI 버튼 추가 -->
<action name="AddButton">
  <Label>🔍 라이브 스트리밍 검색 및 시청</Label>
  <OnClick>
    <call macro="SearchAndWatchLiveStream"/>
  </OnClick>
</action>

<!-- 키워드 입력 필드 -->
<action name="AddInputField">
  <Label>🔍 검색 키워드</Label>
  <Variable>TargetKeyword</Variable>
  <DefaultValue>슬롯생방송</DefaultValue>
</action>
<macro name="SearchAndWatchLiveStream">
  <!-- 1. 유튜브 열기 -->
  <action name="OpenURL">
    <URL>https://www.youtube.com</URL>
  </action>

  <!-- 2. 검색어 입력 -->
  <action name="Type">
    <Selector>input[placeholder='검색']</Selector>
    <Text>{TargetKeyword}</Text>
  </action>

  <!-- 3. 필터 설정: 실시간 라이브 스트리밍 선택 -->
  <action name="Click">
    <Selector>button[aria-label='필터']</Selector>
  </action>
  <action name="Click">
    <Selector>span[text()='실시간']</Selector>
  </action>

  <!-- 4. 라이브 스트리밍 선택 -->
  <action name="WaitFor">
    <Selector>a[href*='/live/']</Selector>
    <Timeout>10000</Timeout>
  </action>
  <action name="Click">
    <Selector>a[href*='/live/']</Selector>
  </action>

  <!-- 5. 라이브 스트리밍 상호작용 -->
  <action name="Delay">
    <Min>5000</Min>
    <Max>10000</Max>
  </action>
  <action name="Type">
    <Selector>textarea[placeholder='댓글을 입력하세요.']</Selector>
    <Text>{RandomLine('./data/comments.txt')}</Text>
  </action>
  <action name="Click">
    <Selector>button[type='submit'][aria-label='전송']</Selector>
  </action>
  <action name="Click">
    <Selector>button[aria-label='좋아요']</Selector>
  </action>

  <!-- 6. 인간적인 행동 시뮬레이션 -->
  <action name="MouseMove">
    <X>{Random(100, 800)}</X>
    <Y>{Random(200, 600)}</Y>
    <Duration>500</Duration>
  </action>
  <action name="Scroll">
    <Distance>{Random(100, 500)}</Distance>
    <Duration>1000</Duration>
  </action>
  <If condition="{Random(1,100)} > 70">
    <Then>
      <action name="ExecuteJS">
        <Code>document.querySelector('video').pause()</Code>
      </action>
      <action name="Delay">
        <Min>5</Min>
        <Max>15</Max>
      </action>
      <action name="ExecuteJS">
        <Code>document.querySelector('video').play()</Code>
      </action>
    </Then>
  </If>
</macro>
<macro name="SearchShortsContent">
  <!-- 1. Shorts 섹션 클릭 -->
  <action name="Click">
    <Selector>button[aria-label='Shorts']</Selector>
  </action>
  
  <!-- 2. 키워드 입력 -->
  <action name="Type">
    <Selector>input[placeholder='검색']</Selector>
    <Text>{TargetKeyword}</Text>
  </action>
  
  <!-- 3. 검색 실행 -->
  <action name="Click">
    <Selector>button[aria-label='검색']</Selector>
  </action>
  
  <!-- 4. 지정된 URL 찾기 -->
  <action name="FindTargetURL">
    <URL>{TargetURL}</URL>
  </action>
  
  <!-- 5. 시청 시작 -->
  <action name="WatchVideo">
    <Duration>60</Duration>
  </action>
</macro>
<macro name="SearchVideoContent">
  <!-- 1. 키워드 입력 -->
  <action name="Type">
    <Selector>input[placeholder='검색']</Selector>
    <Text>{TargetKeyword}</Text>
  </action>
  
  <!-- 2. 검색 버튼 클릭 -->
  <action name="Click">
    <Selector>button[aria-label='검색']</Selector>
  </action>
  
  <!-- 3. 스크롤하며 결과 찾기 -->
  <action name="ScrollAndFind">
    <MaxScroll>10</MaxScroll>
    <TargetURL>{TargetURL}</TargetURL>
  </action>
  
  <!-- 4. 시청 시작 -->
  <action name="WatchVideo">
    <Duration>60</Duration>
  </action>
</macro>
<action name="SetMobileUserAgent">
  <DeviceType>${MobilePlatform}</DeviceType>
  <If condition="${MobilePlatform} == 'iPhone'">
    <Then>
      <UserAgent>Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/1601.1.33</UserAgent>
    </Then>
    <Else>
      <UserAgent>Mozilla/5.0 (Linux; Android 13) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36</UserAgent>
    </Else>
  </If>
</action>
<macro name="MobileHumanBehavior">
  <!-- 마우스 이동 -->
  <action name="MouseMove">
    <X>{Random(100, 800)}</X>
    <Y>{Random(200, 600)}</Y>
    <Duration>500</Duration>
  </action>
  
  <!-- 스크롤 -->
  <action name="Scroll">
    <Distance>{Random(100, 500)}</Distance>
    <Duration>1000</Duration>
  </action>
  
  <!-- 일시정지/재생 -->
  <If condition="{Random(1,100)} > 70">
    <Then>
      <action name="ExecuteJS">
        <Code>document.querySelector('video').pause()</Code>
      </action>
      <action name="Delay">
        <Min>5</Min>
        <Max>15</Max>
      </action>
      <action name="ExecuteJS">
        <Code>document.querySelector('video').play()</Code>
      </action>
    </Then>
  </If>
</macro>
<macro name="LiveStreamWatcher">
  <!-- 1. 실시간 필터 적용 -->
  <action name="Click">
    <Selector>button[aria-label='필터']</Selector>
  </action>
  <action name="Click">
    <Selector>span[text()='실시간']</Selector>
  </action>
  
  <!-- 2. 라이브 스트리밍 선택 -->
  <action name="ClickLiveStream">
    <Selector>a[href*='/live/']</Selector>
  </action>
  
  <!-- 3. 상호작용 -->
  <action name="InteractWithLive">
    <Comments>{RandomLine('./data/comments.txt')}</Comments>
    <LikeProbability>50</LikeProbability>
  </action>
</macro>
<macro name="FixedViewerSystem">
  <action name="SetVariable">
    <Variable>ViewerCount</Variable>
    <Value>500</Value>
  </action>
  
  <loop name="ViewerLoop" count="{ViewerCount}">
    <action name="WatchWithHumanBehavior">
      <Duration>60</Duration>
    </action>
    <action name="Delay">
      <Min>30</Min>
      <Max>60</Max>
    </action>
  </loop>
</macro>
<macro name="CaptchaHandler">
  <If condition="CAPTCHA_DETECTED">
    <Then>
      <action name="SolveCaptcha">
        <Service>2captcha</Service>
      </action>
      <action name="RetryAction"/>
    </Then>
  </If>
</macro>
📱 장치 유형: Android 또는 iPhone 선택
🔍 검색 키워드: 슬롯생방송, 바카라생방송 등
🔗 대상 URL: 시청할 특정 URL 입력
⏱️ 시청 시간: 기본 60초
<macro name="GoogleRankBoost">
  <!-- 1. 키워드로 Google 검색 -->
  <action name="openGoogleSearch">
    <Keyword>${TargetKeyword}</Keyword>
  </action>
  
  <!-- 2. 300위까지 스크롤하며 URL 찾기 -->
  <action name="findTargetURL">
    <URLToFind>${TargetURL}</URLToFind>
    <MaxAttempts>300</MaxAttempts>
  </action>
  
  <!-- 3. URL 발견 시 클릭 -->
  <If condition="TargetURLFound">
    <Then>
      <action name="clickTargetURL"/>
      <action name="logevent">
        <Type>GoogleRankBoost</Type>
        <Details>Clicked ${TargetURL} for keyword '${TargetKeyword}'</Details>
      </action>
    </Then>
  </If>
  
  <!-- 4. 실패 시 오류 로그 -->
  <Else>
    <action name="logevent">
      <Type>Error</Type>
      <Details>URL not found in top 300 results: ${TargetURL}</Details>
    </action>
  </Else>
  
  <!-- 5. 지연 후 재시도 -->
  <action name="delay">
    <Timeout>${GoogleDelay}</Timeout>
  </action>
  
  <!-- 6. 반복 실행 -->
  <action name="GoogleRankBoost"/>
</macro>
<macro name="HumanBehaviorSimulation">
  <!-- 마우스 이동 -->
  <action name="MouseMove">
    <X>{Random(100, 800)}</X>
    <Y>{Random(200, 600)}</Y>
    <Duration>500</Duration>
  </action>
  
  <!-- 스크롤 -->
  <action name="Scroll">
    <Distance>{Random(100, 500)}</Distance>
    <Duration>1000</Duration>
  </action>
  
  <!-- 일시정지/재생 -->
  <If condition="{Random(1,100)} > 70">
    <Then>
      <action name="ExecuteJS">
        <Code>document.querySelector('video').pause()</Code>
      </action>
      <action name="Delay">
        <Min>5</Min>
        <Max>15</Max>
      </action>
      <action name="ExecuteJS">
        <Code>document.querySelector('video').play()</Code>
      </action>
    </Then>
  </If>
  
  <!-- 댓글 작성 -->
  <If condition="{Random(1,100)} > 80">
    <Then>
      <action name="Type">
        <Selector>textarea[placeholder='댓글을 입력하세요.']</Selector>
        <Text>{RandomLine('./data/comments.txt')}</Text>
      </action>
      <action name="Click">
        <Selector>button[type='submit'][aria-label='전송']</Selector>
      </action>
    </Then>
  </If>
</macro>
<macro name="MultiProxyManager">
  <!-- 1. 프록시 리스트 로드 -->
  <action name="ReadFile">
    <File>./proxies.txt</File>
    <Variable>ProxyList</Variable>
  </action>
  
  <!-- 2. 랜덤 프록시 선택 -->
  <action name="SetVariable">
    <Variable>CurrentProxy</Variable>
    <Value>{RandomLine(ProxyList)}</Value>
  </action>
  
  <!-- 3. 프록시 적용 -->
  <action name="SetProxy">
    <Type>HTTP</Type>
    <IP>{CurrentProxy.split(':')[0]}</IP>
    <Port>{CurrentProxy.split(':')[1]}</Port>
    <Username>{CurrentProxy.split(':')[2]}</Username>
    <Password>{CurrentProxy.split(':')[3]}</Password>
  </action>
  
  <!-- 4. 프록시 품질 검사 -->
  <action name="CheckProxyQuality">
    <Timeout>5000</Timeout>
  </action>
</macro>
🎯 목표 URL: https://example.com/slot-stream
🔍 키워드: 슬롯생방송
⏱️ 클릭 지연: 15초
📱 장치 유형: Android/iPhone
🔄 반복 실행: 100회
▶️ 구글 순위 상승 시작
<macro name="YouTubeChannelBuilder">
  <!-- 1. 채널 생성 -->
  <action name="createChannel">
    <Name>${ChannelPrefix}{RandomNumber}</Name>
    <Avatar>${Avatars}/{RandomAvatar}.jpg</Avatar>
  </action>
  
  <!-- 2. 인기 콘텐츠 랜덤 시청 -->
  <action name="watchPopularContent">
    <ContentType>Shorts,Video,Live</ContentType>
    <ViewCount>100</ViewCount>
  </action>
  
  <!-- 3. 채널 데이터 저장 -->
  <action name="saveChannelData">
    <Data>view_count,like_count,subscriber_count</Data>
  </action>
</macro>
<!-- 채널 빌더 버튼 -->
<button onclick="buildYouTubeChannel()" class="channel-builder-btn">🏗️ 채널 빌더</button>

<script>
function buildYouTubeChannel() {
  BAS.sendCommand('YouTubeChannelBuilder');
  updateLog('🏗️ 유튜브 채널 빌더 실행');
}
</script>
<div class="section">
  <h2>채널 빌더 설정</h2>
  <div class="button-group">
    <button onclick="buildYouTubeChannel()" class="channel-builder-btn">🏗️ 채널 빌더</button>
    <button onclick="autoWatchPopular()" class="popular-watcher-btn">📺 인기 콘텐츠 시청</button>
  </div>
  
  <div class="settings">
    <label>채널 접두사: <input type="text" id="channelPrefix" value="Channel_"></label>
    <label>시청 횟수: <input type="number" id="viewCount" value="100"></label>
  </div>
</div>
<macro name="ChangeRecoveryEmail">
  <!-- 1. Google 계정 설정 페이지 열기 -->
  <action name="OpenURL">
    <URL>https://myaccount.google.com</URL>
  </action>
  
  <!-- 2. 로그인 (필요 시) -->
  <If condition="!IsLoggedIn">
    <Then>
      <action name="LoginToGoogle">
        <Username>{TargetAccount}</Username>
        <Password>{TargetPassword}</Password>
      </Then>
    </action>
  </If>
  
  <!-- 3. 복구 이메일 검색 -->
  <action name="Type">
    <Selector>input[placeholder='검색']</Selector>
    <Text>복구 이메일</Text>
  </action>
  
  <!-- 4. 복구 이메일 편집 -->
  <action name="Click">
    <Selector>a[href*='/recovery/email']</Selector>
  </action>
  
  <!-- 5. 새 이메일 입력 -->
  <action name="Type">
    <Selector>input[type='email'][name='newEmail']</Selector>
    <Text>{NewRecoveryEmail}</Text>
  </action>
  
  <!-- 6. 인증 코드 받기 -->
  <action name="SendVerificationCode">
    <Email>{NewRecoveryEmail}</Email>
  </action>
  
  <!-- 7. 네이버 메일에서 인증 코드 가져오기 -->
  <action name="FetchNaverMail">
    <Username>{NaverUsername}</Username>
    <Password>{NaverPassword}</Password>
  </action>
  
  <!-- 8. 인증 코드 입력 -->
  <action name="Type">
    <Selector>input[name='code']</Selector>
    <Text>{VerificationCode}</Text>
  </action>
  
  <!-- 9. 저장 버튼 클릭 -->
  <action name="Click">
    <Selector>button[type='submit'][value='저장']</Selector>
  </action>
  
  <!-- 10. 성공 확인 -->
  <action name="LogEvent">
    <Type>RecoveryEmailUpdated</Type>
    <Details>New Recovery Email Updated: {NewRecoveryEmail}</Details>
  </action>
</macro>
<!-- UI 버튼 추가 -->
<div class="button-group">
  <button onclick="changeRecoveryEmail()">🔄 복구 이메일 변경</button>
</div>

<!-- 입력 필드 추가 -->
<div class="input-group">
  <label for="target-account">타겟 계정:</label>
  <input type="text" id="target-account" placeholder="이메일 주소 입력">
</div>
<div class="input-group">
  <label for="new-recovery-email">새 복구 이메일:</label>
  <input type="text" id="new-recovery-email" placeholder="새 이메일 주소 입력">
</div>
<div class="input-group">
  <label for="naver-username">네이버 ID:</label>
  <input type="text" id="naver-username" placeholder="네이버 아이디">
</div>
<div class="input-group">
  <label for="naver-password">네이버 비밀번호:</label>
  <input type="password" id="naver-password" placeholder="네이버 비밀번호">
  <function name="SendVerificationCode">
  <action name="CallAPI">
    <URL>https://accounts.google.com/b/0/AddRecoveryEmail?service=mail&amp;continue=https://mail.google.com/mail/u/0/#inbox&amp;hl=ko&amp;pli=1&amp;rm=lr&amp;idv=1&amp;rip=1&amp;next=https://mail.google.com/mail/u/0/#inbox</URL>
    <Method>POST</Method>
    <Data>email={NewRecoveryEmail}</Data>
  </action>
</function>
</div>
<function name="FetchNaverMail">
  <action name="CallAPI">
    <URL>https://mail.naver.com/</URL>
    <Method>GET</Selector>
    <Headers>
      <Header name="Authorization">Basic {Base64Encode(NaverUsername:NaverPassword)}</Header>
    </Headers>
    <Variable>NaverMailContent</Variable>
  </action>
  <action name="ExtractText">
    <Text>{NaverMailContent}</Text>
    <Variable>VerificationCode</Variable>
    <Regex>코드: (\d{6})</Regex>
  </action>
</function>
<macro name="ChangeRecoveryEmailAnd2FA">
  <!-- 1. Google 계정 설정 페이지 열기 -->
  <action name="OpenURL">
    <URL>https://myaccount.google.com/security</URL>
  </action>
  
  <!-- 2. 로그인 (필요 시) -->
  <If condition="!IsLoggedIn">
    <Then>
      <action name="LoginToGoogle">
        <Username>{GmailUsername}</Username>
        <Password>{GmailPassword}</Password>
      </Then>
    </action>
  </If>
  
  <!-- 3. 복구 이메일 찾기 -->
  <action name="Click">
    <Selector>a[href*='/recovery/email']</Selector>
  </action>
  
  <!-- 4. 새 복구 이메일 입력 -->
  <action name="Type">
    <Selector>input[type='email'][name='newEmail']</Selector>
    <Text>{NewRecoveryEmail}</Text>
  </action>
  
  <!-- 5. 인증 코드 받기 -->
  <action name="SendVerificationCode">
    <Email>{NewRecoveryEmail}</Email>
  </action>
  
  <!-- 6. 네이버 메일에서 인증 코드 가져오기 -->
  <action name="FetchNaverMail">
    <Username>{NaverUsername}</Username>
    <Password>{NaverPassword}</Password>
  </action>
  
  <!-- 7. 인증 코드 입력 -->
  <action name="Type">
    <Selector>input[name='code']</Selector>
    <Text>{VerificationCode}</Text>
  </action>
  
  <!-- 8. 저장 버튼 클릭 -->
  <action name="Click">
    <Selector>button[type='submit'][value='저장']</Selector>
  </action>
  
  <!-- 9. 2FA 토큰 입력 -->
  <action name="TwoFactorAuthentication">
    <Token>{Gmail2FA}</Token>
  </action>
  
  <!-- 10. 데이터베이스 업데이트 -->
  <action name="UpdateDatabase">
    <Table>gmail_accounts</Table>
    <Columns>Gmail_Username, Gmail_Passwords, Recovery_Email, Gmail_2FA</Columns>
    <Values>{GmailUsername}|{GmailPassword}|{NewRecoveryEmail}|{Gmail2FA}</Values>
  </action>
  
  <!-- 11. 성공 확인 -->
  <action name="LogEvent">
    <Type>RecoveryEmailUpdated</Type>
    <Details>New Recovery Email Updated: {NewRecoveryEmail}</Details>
  </action>
</macro>
<!-- UI 버튼 추가 -->
<div class="button-group">
  <button onclick="changeRecoveryEmail()">🔄 복구 이메일 변경</button>
</div>

<!-- 입력 필드 추가 -->
<div class="input-group">
  <label for="target-account">타겟 계정:</label>
  <input type="text" id="target-account" placeholder="이메일 주소 입력">
</div>
<div class="input-group">
  <label for="new-recovery-email">새 복구 이메일:</label>
  <input type="text" id="new-recovery-email" placeholder="새 이메일 주소 입력">
</div>
<div class="input-group">
  <label for="naver-username">네이버 ID:</label>
  <input type="text" id="naver-username" placeholder="네이버 아이디">
</div>
<div class="input-group">
  <label for="naver-password">네이버 비밀번호:</label>
  <input type="password" id="naver-password" placeholder="네이버 비밀번호">
</div>
<function name="SendVerificationCode">
  <action name="CallAPI">
    <URL>https://accounts.google.com/b/0/AddRecoveryEmail?service=mail&amp;continue=https://mail.google.com/mail/u/0/#inbox&amp;hl=ko&amp;pli=1&amp;rm=lr&amp;idv=1&amp;rip=1&amp;next=https://mail.google.com/mail/u/0/#inbox</URL>
    <Method>POST</Method>
    <Data>email={NewRecoveryEmail}</Data>
  </action>
</function>
<function name="SendVerificationCode">
  <action name="CallAPI">
    <URL>https://accounts.google.com/b/0/AddRecoveryEmail?service=mail&amp;continue=https://mail.google.com/mail/u/0/#inbox&amp;hl=ko&amp;pli=1&amp;rm=lr&amp;idv=1&amp;rip=1&amp;next=https://mail.google.com/mail/u/0/#inbox</URL>
    <Method>POST</Method>
    <Data>email={NewRecoveryEmail}</Data>
  </action>
</function>
<function name="FetchNaverMail">
  <action name="CallAPI">
    <URL>https://mail.naver.com/</URL>
    <Method>GET</Selector>
    <Headers>
      <Header name="Authorization">Basic {Base64Encode(NaverUsername:NaverPassword)}</Header>
    </Headers>
    <Variable>NaverMailContent</Variable>
  </action>
  <action name="ExtractText">
    <Text>{NaverMailContent}</Text>
    <Variable>VerificationCode</Variable>
    <Regex>코드: (\d{6})</Regex>
  </action>
</function>
<macro name="ChangeRecoveryEmailAnd2FA">
  <!-- 1. Google 계정 설정 페이지 열기 -->
  <action name="OpenURL">
    <URL>https://myaccount.google.com/security</URL>
  </action>
  
  <!-- 2. 로그인 (필요 시) -->
  <If condition="!IsLoggedIn">
    <Then>
      <action name="LoginToGoogle">
        <Username>{GmailUsername}</Username>
        <Password>{GmailPassword}</Password>
      </Then>
    </action>
  </If>
  
  <!-- 3. 복구 이메일 찾기 -->
  <action name="Click">
    <Selector>a[href*='/recovery/email']</Selector>
  </action>
  
  <!-- 4. 새 복구 이메일 입력 -->
  <action name="Type">
    <Selector>input[type='email'][name='newEmail']</Selector>
    <Text>{NewRecoveryEmail}</Text>
  </action>
  
  <!-- 5. 인증 코드 받기 -->
  <action name="SendVerificationCode">
    <Email>{NewRecoveryEmail}</Email>
  </action>
  
  <!-- 6. 네이버 메일에서 인증 코드 가져오기 -->
  <action name="FetchNaverMail">
    <Username>{NaverUsername}</Username>
    <Password>{NaverPassword}</Password>
  </action>
  
  <!-- 7. 인증 코드 입력 -->
  <action name="Type">
    <Selector>input[name='code']</Selector>
    <Text>{VerificationCode}</Text>
  </action>
  
  <!-- 8. 저장 버튼 클릭 -->
  <action name="Click">
    <Selector>button[type='submit'][value='저장']</Selector>
  </action>
  
  <!-- 9. 2FA 토큰 입력 -->
  <action name="TwoFactorAuthentication">
    <Token>{Gmail2FA}</Token>
  </action>
  
  <!-- 10. 데이터베이스 업데이트 -->
  <action name="UpdateDatabase">
    <Table>gmail_accounts</Table>
    <Columns>Gmail_Username, Gmail_Passwords, Recovery_Email, Gmail_2FA</Columns>
    <Values>{GmailUsername}|{GmailPassword}|{NewRecoveryEmail}|{Gmail2FA}</Values>
  </action>
  
  <!-- 11. 성공 확인 -->
  <action name="LogEvent">
    <Type>RecoveryEmailUpdated</Type>
    <Details>New Recovery Email Updated: {NewRecoveryEmail}</Details>
  </action>
</macro>
<!-- UI 버튼 추가 -->
<div class="button-group">
  <button onclick="changeRecoveryEmail()">🔄 복구 이메일 변경</button>
</div>

<!-- 입력 필드 추가 -->
<div class="input-group">
  <label for="target-account">타겟 계정:</label>
  <input type="text" id="target-account" placeholder="이메일 주소 입력">
</div>
<div class="input-group">
  <label for="new-recovery-email">새 복구 이메일:</label>
  <input type="text" id="new-recovery-email" placeholder="새 이메일 주소 입력">
</div>
<div class="input-group">
  <label for="naver-username">네이버 ID:</label>
  <input type="text" id="naver-username" placeholder="네이버 아이디">
</div>
<div class="input-group">
  <label for="naver-password">네이버 비밀번호:</label>
  <input type="password" id="naver-password" placeholder="네이버 비밀번호">
</div>
<function name="SendVerificationCode">
  <action name="CallAPI">
    <URL>https://accounts.google.com/b/0/AddRecoveryEmail?service=mail&amp;continue=https://mail.google.com/mail/u/0/#inbox&amp;hl=ko&amp;pli=1&amp;rm=lr&amp;idv=1&amp;rip=1&amp;next=https://mail.google.com/mail/u/0/#inbox</URL>
    <Method>POST</Method>
    <Data>email={NewRecoveryEmail}</Data>
  </action>
</function>
<function name="FetchNaverMail">
  <action name="CallAPI">
    <URL>https://mail.naver.com/</URL>
    <Method>GET</Selector>
    <Headers>
      <Header name="Authorization">Basic {Base64Encode(NaverUsername:NaverPassword)}</Header>
    </Headers>
    <Variable>NaverMailContent</Variable>
  </action>
  <action name="ExtractText">
    <Text>{NaverMailContent}</Text>
    <Variable>VerificationCode</Variable>
    <Regex>코드: (\d{6})</Regex>
  </action>
</function>
<macro name="UpdateDatabaseOnRecoveryChange">
  <!-- 1. 데이터베이스 연결 -->
  <action name="ConnectToDatabase">
    <Database>gmail_accounts.db</Database>
  </action>
  
  <!-- 2. 변경된 복구 이메일 저장 -->
  <action name="UpdateDatabase">
    <Table>gmail_accounts</Table>
    <Columns>Gmail_Username, Recovery_Email</Columns>
    <Values>{Account.id}|{NewRecoveryEmail}</Values>
  </action>
  
  <!-- 3. 변경된 비밀번호 저장 -->
  <If condition="PasswordChanged">
    <Then>
      <action name="UpdateDatabase">
        <Table>gmail_accounts</Table>
        <Columns>Gmail_Username, Gmail_Passwords</Columns>
        <Values>{Account.id}|{NewPassword}</Values>
      </action>
    </Then>
  </If>
  
  <!-- 4. 성공 확인 -->
  <action name="LogEvent">
    <Type>DatabaseUpdated</Type>
    <Details>Updated Recovery Email for {Account.id}: {NewRecoveryEmail}</Details>
  </action>
</macro>
<!-- UI 버튼 추가 -->
<div class="button-group">
  <button onclick="updateRecoveryEmail()">🔄 복구 이메일 변경</button>
  <button onclick="updatePassword()">🔄 비밀번호 변경</button>
</div>

<!-- 입력 필드 추가 -->
<div class="input-group">
  <label for="target-account">타겟 계정:</label>
  <input type="text" id="target-account" placeholder="이메일 주소 입력">
</div>
<div class="input-group">
  <label for="new-recovery-email">새 복구 이메일:</label>
  <input type="text" id="new-recovery-email" placeholder="새 이메일 주소 입력">
</div>
<div class="input-group">
  <label for="new-password">새 비밀번호:</label>
  <input type="password" id="new-password" placeholder="새 비밀번호 입력">
</div>
<function name="UpdateDatabase">
  <action name="DatabaseOpen">
    <File>gmail_accounts.db</File>
  </action>
  <action name="DatabaseQuery">
    <Query>UPDATE gmail_accounts SET Recovery_Email = '{NewRecoveryEmail}' WHERE Gmail_Username = '{Account.id}'</Query>
  </action>
  <action name="DatabaseClose"/>
</function>
<function name="LogEvent">
  <action name="CreateFile">
    <Name>logs.txt</Name>
    <Header>Type|Timestamp|Details</Header>
    <Data>{Type}|{CurrentDateTime}|{Details}</Data>
  </action>
</function>
<macro name="LiveStreamViewer">
  <!-- 1. YouTube 접속 -->
  <action name="OpenURL">
    <URL>https://www.youtube.com</URL>
  </action>
  
  <!-- 2. 검색 입력 -->
  <action name="Type">
    <Selector>input[placeholder='검색']</Selector>
    <Text>{SearchKeyword}</Text>
  </action>
  
  <!-- 3. 검색 실행 -->
  <action name="Click">
    <Selector>button[aria-label='검색']</Selector>
  </action>
  
  <!-- 4. 라이브 필터 적용 -->
  <action name="Click">
    <Selector>a[href*='/results?filter=live_streams']</Selector>
  </action>
  
  <!-- 5. 랜덤 라이브 방송 선택 -->
  <action name="RandomClick">
    <Selector>div#contents ytd-item-section-renderer a</Selector>
  </action>
  
  <!-- 6. 시청 시작 -->
  <action name="WatchVideo">
    <MinDuration>{MinViewTime}</MinDuration>
    <MaxDuration>{MaxViewTime}</MaxDuration>
  </action>
  
  <!-- 7. 자동 이탈 -->
  <action name="CloseBrowser">
    <Delay>{Random(MinViewTime, MaxViewTime)}</Delay>
  </action>
  
  <!-- 8. 성공 확인 -->
  <action name="LogEvent">
    <Type>LiveStreamViewed</Type>
    <Details>Viewed {SearchKeyword} for {ViewTime} seconds</Details>
  </action>
</macro>
<!-- UI 버튼 추가 -->
<div class="button-group">
  <button onclick="startLiveStreamViewer()">🚀 라이브 방송 조회수 증가</button>
</div>

<!-- 입력 필드 추가 -->
<div class="input-group">
  <label for="search-keyword">검색 키워드:</label>
  <input type="text" id="search-keyword" placeholder="슬롯생방송">
</div>
<div class="input-group">
  <label for="min-view-time">최소 시청 시간 (초):</label>
  <input type="number" id="min-view-time" value="30">
</div>
<div class="input-group">
  <label for="max-view-time">최대 시청 시간 (초):</label>
  <input type="number" id="max-view-time" value="120">
</div>
<function name="RandomViewTime">
  <action name="SetVariable">
    <Variable>ViewTime</Variable>
    <Value>{Random(MinViewTime, MaxViewTime)}</Value>
  </action>
</function>
<function name="AutoExit">
  <action name="Delay">
    <Timeout>{ViewTime}</Timeout>
  </action>
  <action name="CloseBrowser"/>
</function>
<macro name="EnableYouTubeWatchHistory">
  <!-- 1. YouTube 접속 -->
  <action name="OpenURL">
    <URL>https://www.youtube.com</URL>
  </action>
  
  <!-- 2. 로그인 (필요 시) -->
  <If condition="!IsLoggedIn">
    <Then>
      <action name="LoginToGoogle">
        <Username>{GmailUsername}</Username>
        <Password>{GmailPassword}</Password>
      </Then>
    </action>
  </If>
  
  <!-- 3. 데이터 관리 페이지 이동 -->
  <action name="OpenURL">
    <URL>https://myactivity.google.com/u/0/activitycontrols?product=yt&amp;hl=en&amp;source=privacy-advisor-youtube&amp;authuser=0&amp;cid=38c7f9456e7d4b7a&amp;continue=https%3A%2F%2Fwww.youtube.com%2Factivity_controls%2Fyoutube%3Fhl%3Den&amp;source%3Dprivacy-advisor-youtube&amp;authuser%3D0&amp;cid%3D38c7f9456e7d4b7a</URL>
  </action>
  
  <!-- 4. 시청 기록 저장 설정 -->
  <action name="Click">
    <Selector>input[name='yt_watch_history']</Selector>
  </action>
  
  <!-- 5. 저장 버튼 클릭 -->
  <action name="Click">
    <Selector>button[type='submit'][value='Save']</Selector>
  </action>
  
  <!-- 6. 성공 확인 -->
  <action name="LogEvent">
    <Type>WatchHistoryEnabled</Type>
    <Details>YouTube 시청 기록 저장 설정 완료</Details>
  </action>
</macro>
<!-- UI 버튼 추가 -->
<div class="button-group">
  <button onclick="enableYouTubeWatchHistory()">📖 유튜브 시청 기록 저장</button>
</div>

<!-- 입력 필드 추가 -->
<div class="input-group">
  <label for="target-account">타겟 계정:</label>
  <input type="text" id="target-account" placeholder="이메일 주소 입력">
</div>
<div class="input-group">
  <label for="password">비밀번호:</label>
  <input type="password" id="password" placeholder="비밀번호 입력">
</div>
<function name="LoginToGoogle">
  <action name="OpenURL">
    <URL>https://accounts.google.com/signin</URL>
  </action>
  <action name="Type">
    <Selector>input[type='email'][name='identifier']</Selector>
    <Text>{GmailUsername}</Text>
  </action>
  <action name="Click">
    <Selector>#identifierNext button</Selector>
  </action>
  <action name="Type">
    <Selector>input[type='password'][name='Passwd']</Selector>
    <Text>{GmailPassword}</Text>
  </action>
  <action name="Click">
    <Selector>#passwordNext button</Selector>
  </action>
</function>
<function name="SaveSettings">
  <action name="Click">
    <Selector>button[type='submit'][value='Save']</Selector>
  </action>
</function>
<!-- === [추가 코드] 활동 로그 강제 유지 기능 === -->
<macro name="ForceMaintainActivityLogs">
    <action name="Navigate">
        <Url>https://myaccount.google.com/activitycontrols</Url>
    </action>
    <action name="WaitFor">
        <Selector>div[role='checkbox']</Selector>
        <Timeout>10000</Timeout>
    </action>
    <action name="Click">
        <Selector>div[role='checkbox'][aria-checked='false']</Selector>
    </action>
    <action name="LogEvent">
        <Type>ActivityLogsForced</Type>
        <Details>활동 로그 강제 유지 완료: {Account.id}</Details>
    </action>
</macro>
<Action Name="setMobileUserAgent">
  <UserAgent>
    <If condition="DeviceType == 'Android'">
      <Then>Mozilla/5.0 (Linux; Android 13; SM-S901U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36</Then>
    </If>
    <ElseIf condition="DeviceType == 'iPhone'">
      <Then>Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/15E148</Then>
    </ElseIf>
    <ElseIf condition="DeviceType == 'Mac'">
      <Then>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36</Then>
    </Else>
  </UserAgent>
</Action>
<Action Name="ClickLikeButton">
  <XPath>//button[@aria-label="좋아요"]//yt-icon</XPath>
  <WaitAfter>1000</WaitAfter>
</Action>
<If condition="ElementNotFound">
  <Then>
    <action name="Delay"><Min>2000</Min><Max>5000</Max></action>
    <action name="RetryLastCommand"><MaxAttempts>3</MaxAttempts></action>
  </Then>
</If>
<Action Name="RotateProxy">
  <Source>File</Source>
  <File>proxies.txt</File>
  <Random>true</Random>
</Action>
<Action Name="RandomDelay">
  <Min>1500</Min>
  <Max>4500</Max>
</Action>
<Action Name="MouseMove">
  <X>{Random(100, 800)}</X>
  <Y>{Random(200, 600)}</Y>
  <Duration>500</Duration>
</Action>
<Action Name="Scroll">
  <Distance>{Random(100, 500)}</Distance>
  <Duration>1000</Duration>
</Action>
<Macro Name="UpdateAccountStatus">
  <action name="CheckGmailStatus"/>
  <action name="UpdateProxyList"/>
</Macro>
<Action Name="LogEvent">
  <Type>View</Type>
  <Details>User {Account.id} viewed video: {VideoURL}</Details>
</Action>
<action name="EmulateDifferentDevices"/>
<action name="UseHighQualityFingerprintAPI">
  <APIKey>J6tgC3yKrA67k6wr4SpeqWxLlRqgyZ8N0AhkmCmV9jAPC5hxuo1jt9TfFDsWWhJI</APIKey>
</action>
<macro name="LiveStreamRanking">
  <action name="SearchForKeyword">
    <Keyword>{RandomLine(live_ranking_keywords.txt)}</Keyword>
  </action>
  <action name="ClickLiveSection"/>
  <action name="FindTargetLiveStream"/>
  <action name="ClickLiveStream"/>
  <action name="MaintainViewership">
    <Duration>{Random(600, 3600)}</Duration>
  </action>
  <action name="AutoRespondToChat"/>
</macro>
<action name="PreventSubscriptionRemoval">
  <action name="Navigate">
    <Url>{TargetChannelURL}/shorts</Url>
  </action>
  <action name="Delay">
    <Min>5000</Min>
    <Max>10000</Max>
  </action>
  <action name="Click">
    <Selector>ytd-reel-item-renderer:nth-child({Random(1,5)}) #video-title</Selector>
  </action>
  <action name="Delay">
    <Min>30000</Min>
    <Max>90000</Max>
  </action>
</action>
<macro name="🤖_AI_Protect_Proxy">
  <If condition="document.title.includes('캡차') or document.querySelector('img[src*='captcha']')">
    <Then>
      <action name="RestartBrowser"/>
      <action name="LogEvent">
        <Type>AntiRage</Type>
        <Details>유튜브 캡차 감지 → 프록시 교체</Details>
      </action>
    </Then>
  </If>
</macro>
<action name="setMobileUserAgent">
  <DeviceType>${MobilePlatform}</DeviceType>
</action>
<macro name="💰_CostEfficient_Captcha_Bypass">
  <!-- 1. 캡차 감지 시 프록시 회전 먼저 시도 -->
  <action name="RotateProxy">
    <ProxyList>./proxies/isp_rotated.txt</ProxyList>
    <Delay>5000</Delay>
  </action>
  
  <!-- 2. 인간 행동 시뮬레이션 추가 -->
  <action name="HumanBehavior">
    <MouseMoveIterations>3</MouseMoveIterations>
    <ScrollCount>2</ScrollCount>
    <RandomDelay>3000-6000</RandomDelay>
  </action>
  
  <!-- 3. 캡차 여전히 감지되면 2Captcha API 사용 -->
  <If condition="CAPTCHA_DETECTED">
    <Then>
      <action name="SolveCaptcha">
        <Service>2captcha</Service>
        <APIKey>YOUR_2CAPTCHA_API_KEY</APIKey>
        <MaxAttempts>3</MaxAttempts>
      </action>
    </Then>
  </If>
  
  <!-- 4. 성공/실패 로그 기록 -->
  <action name="LogEvent">
    <Type>CaptchaAttempt</Type>
    <Details>Proxy Rotation: {ProxyChanged} | API Used: {CaptchaSolved}</Details>
  </action>
</macro>
<macro name="HumanBehavior">
  <!-- 마우스 이동 -->
  <action name="MouseMove">
    <X>{Random(100, 800)}</X>
    <Y>{Random(200, 600)}</Y>
    <Duration>500</Duration>
  </action>
  
  <!-- 스크롤 -->
  <action name="Scroll">
    <Distance>{Random(200, 600)}</Distance>
    <Duration>1500</Duration>
  </action>
  
  <!-- 랜덤 지연 -->
  <action name="Delay">
    <Min>3000</Min>
    <Max>6000</Max>
  </action>
</macro>
<macro name="LoginToGoogle">
  ...
  <If condition="CAPTCHA_DETECTED">
    <Then>
      <call macro="💰_CostEfficient_Captcha_Bypass"/>
    </Then>
  </If>
  ...
</macro>
<div class="captcha-settings">
  <label>2Captcha API 키: 
    <input type="text" id="captcha_api_key" placeholder="YOUR_KEY">
  </label>
  <label>프록시 회전 횟수: 
    <input type="number" id="proxy_rotation_attempts" value="3">
  </label>
</div>
<!-- === [추가 코드] 언어 설정 자동화 === -->
<macro name="AutoSetKoreanLanguage">
  <!-- 1. YouTube 언어 설정 페이지 이동 -->
  <action name="Navigate">
    <Url>https://www.youtube.com/account_preferences</Url>
  </action>
  
  <!-- 2. 언어 선택 드롭다운 클릭 -->
  <action name="Click">
    <Selector>select[name='language']</Selector>
  </action>
  
  <!-- 3. 한국어 선택 -->
  <action name="Select">
    <Selector>select[name='language']</Selector>
    <Value>한국어</Value>
  </action>
  
  <!-- 4. 저장 버튼 클릭 -->
  <action name="Click">
    <Selector>button[type='submit'][value='저장']</Selector>
  </action>
  
  <!-- 5. 지메일 언어 설정 -->
  <action name="Navigate">
    <Url>https://myaccount.google.com/language</Url>
  </action>
  
  <!-- 6. 언어 선택 드롭다운 클릭 -->
  <action name="Click">
    <Selector>div[class='selectContainer']</Selector>
  </action>
  
  <!-- 7. 한국어 선택 -->
  <action name="Click">
    <Selector>span[text()='한국어']</Selector>
  </action>
  
  <!-- 8. 적용 완료 로그 -->
  <action name="LogEvent">
    <Type>LanguageSet</Type>
    <Details>언어 설정 완료: 한국어</Details>
  </action>
</macro>

<!-- === [추가 코드] 다국어 변경 기능 === -->
<macro name="ChangeLanguage">
  <action name="SetVariable">
    <Variable>NewLanguage</Variable>
    <Value>{SelectedLanguage}</Value>
  </action>
  
  <!-- YouTube 언어 변경 -->
  <action name="Navigate">
    <Url>https://www.youtube.com/account_preferences</Url>
  </action>
  <action name="Select">
    <Selector>select[name='language']</Selector>
    <Value>{NewLanguage}</Value>
  </action>
  <action name="Click">
    <Selector>button[type='submit'][value='저장']</Selector>
  </action>
  
  <!-- 지메일 언어 변경 -->
  <action name="Navigate">
    <Url>https://myaccount.google.com/language</Url>
  </action>
  <action name="Click">
    <Selector>div[class='selectContainer']</Selector>
  </action>
  <action name="Click">
    <Selector>span[text()='{NewLanguage}']</Selector>
  </action>
  
  <!-- 성공 로그 -->
  <action name="LogEvent">
    <Type>LanguageSet</Type>
    <Details>언어 변경 완료: {NewLanguage}</Details>
  </action>
</macro>
<!-- === [UI 업데이트] 언어 설정 버튼 추가 === -->
<div class="language-section">
  <h3>🌐 언어 설정</h3>
  <div class="button-group">
    <button onclick="setKoreanLanguage()">🇰🇷 기본 한국어 설정</button>
    <button onclick="showLanguageSelector()">🌍 언어 변경</button>
  </div>
</div>

<!-- === [팝업 모달] 다국어 선택 === -->
<div id="languageModal" class="modal">
  <div class="modal-content">
    <span onclick="closeModal('languageModal')" class="close-btn">×</span>
    <h2>🌍 언어 변경</h2>
    <select id="languageSelector">
      <option value="한국어">🇰🇷 한국어</option>
      <option value="English">🇺🇸 English</option>
      <option value="Tiếng Việt">🇻🇳 Tiếng Việt</option>
      <option value="Español">🇪🇸 Español</option>
    </select>
    <button onclick="applyLanguage()">💾 적용</button>
    <div class="info-message">
      <p>💡 선택한 언어로 YouTube 및 지메일을 변경합니다.</p>
    </div>
  </div>
</div>
// 언어 설정 모달 표시
function showLanguageSelector() {
  document.getElementById('languageModal').style.display = 'flex';
}

// 기본 한국어 설정
function setKoreanLanguage() {
  BAS.sendCommand('AutoSetKoreanLanguage');
  updateLog('🇰🇷 기본 언어 설정: 한국어로 변경 중...');
}

// 선택한 언어 적용
function applyLanguage() {
  const selectedLang = document.getElementById('languageSelector').value;
  BAS.sendCommand('ChangeLanguage', { SelectedLanguage: selectedLang });
  updateLog(`🌍 ${selectedLang}로 언어 변경 중...`);
  closeModal('languageModal');
}

// 모달 닫기
function closeModal(modalId) {
  document.getElementById(modalId).style.display = 'none';
}
<!-- === [추가 코드] 언어 관련 조건 === -->
<Conditions>
  <Condition Name="IsKoreanLanguage">
    <Expression>Contains(PageSource, '한국어') or Contains(PageSource, 'Korean')</Expression>
  </Condition>
</Conditions>

<!-- === [설정] 기본 언어 === -->
<settings>
  <DefaultLanguage>한국어</DefaultLanguage>
</settings>
<macro name="createGmailAccountLoop">
  ...
  <call macro="AutoSetKoreanLanguage"/>
  ...
</macro>
<UI>
  ...
  <div class="language-section">
    <!-- 위에서 생성한 HTML 코드 유지 -->
  </div>
  ...
</UI>
// 기존 스크립트에 함수 추가 (위의 3번 참조)
<!-- === [추가 코드] 언어 설정 설명 === -->
<action name="AddInfoMessage">
  <Message>🇰🇷 기본 언어 설정: 모든 계정이 자동으로 한국어로 설정됩니다. 수동 변경을 원하시면 '🌍 언어 변경' 버튼을 사용하세요.</Message>
  <Title>🌐 언어 설정 가이드</Title>
</action>
<Variable name="LanguageCodes">
  한국어: ko
  English: en
  Tiếng Việt: vi
  Español: es
</Variable>
<!-- === [핵심 코드] 언어 자동 설정 === -->
<macro name="AutoSetKoreanLanguage">
  <!-- 유튜브 언어 강제 한국어 -->
  <action name="Navigate">
    <Url>https://www.youtube.com/account_preferences</Url>
  </action>
  <action name="Click">
    <Selector>select[name='language']</Selector>
  </action>
  <action name="Select">
    <Selector>select[name='language']</Selector>
    <Value>한국어</Value>
  </action>
  <action name="Click">
    <Selector>button[type='submit'][value='저장']</Selector>
  </action>
  
  <!-- 지메일 언어 강제 한국어 -->
  <action name="Navigate">
    <Url>https://myaccount.google.com/language</Url>
  </action>
  <action name="Click">
    <Selector>div[class='selectContainer']</Selector>
  </action>
  <action name="Click">
    <Selector>span[text()='한국어']</Selector>
  </action>
</macro>

<!-- === [추가 코드] 다국어 변경 기능 === -->
<macro name="ChangeLanguage">
  <action name="SetVariable">
    <Variable>NewLanguage</Variable>
    <Value>{SelectedLanguage}</Value>
  </action>
  
  <!-- 유튜브 언어 변경 -->
  <action name="Navigate">
    <Url>https://www.youtube.com/account_preferences</Url>
  </action>
  <action name="Select">
    <Selector>select[name='language']</Selector>
    <Value>{NewLanguage}</Value>
  </action>
  <action name="Click">
    <Selector>button[type='submit'][value='저장']</Selector>
  </action>
  
  <!-- 지메일 언어 변경 -->
  <action name="Navigate">
    <Url>https://myaccount.google.com/language</Url>
  </action>
  <action name="Click">
    <Selector>div[class='selectContainer']</Selector>
  </action>
  <action name="Click">
    <Selector>span[text()='{NewLanguage}']</Selector>
  </action>
</macro>
<!-- === [추가 코드] 이름/성 자동 변경 === -->
<macro name="UpdateGmailName">
  <action name="ReadFromFile">
    <File>{NamesFilePath}</File>
    <Separator>|</Separator>
    <Columns>FirstName, LastName</Columns>
  </action>
  
  <!-- 프로필 이름 업데이트 -->
  <action name="Navigate">
    <Url>https://myaccount.google.com/profile</Url>
  </action>
  <action name="WaitFor">
    <Selector>#profile-name</Selector>
    <Timeout>10000</Timeout>
  </action>
  <action name="Type">
    <Selector>#profile-name input</Selector>
    <Text>{RandomItem(FirstNames)} {RandomItem(LastNames)}</Text>
  </action>
  
  <!-- 프로필 사진 업데이트 -->
  <action name="Click">
    <Selector>#profile-photo-button</Selector>
  </action>
  <action name="Delay">
    <Min>1000</Min>
    <Max>2000</Max>
  </action>
  <action name="UploadFile">
    <Selector>input[type='file']</Selector>
    <Path>{RandomLine('./avatars/*.jpg')}</Path>
  </action>
</macro>
<!-- === [추가 코드] 언어/프로필 관리 버튼 === -->
<div class="language-section">
  <h3>🌍 언어 관리</h3>
  <button onclick="callMacro('AutoSetKoreanLanguage')">🇰🇷 기본 한국어 설정</button>
  <select id="languageSelector" onchange="changeLanguage()">
    <option value="한국어">🇰🇷 한국어</option>
    <option value="Bahasa Indonesia">🇮🇩 인도네시아어</option>
    <option value="Русский">🇷🇺 러시아어</option>
  </select>
</div>

<div class="profile-section">
  <h3>👤 프로필 관리</h3>
  <button onclick="updateGmailName()">🔄 이름/성/프로필 사진 갱신</button>
  <input type="file" id="namesFile" accept=".txt">
  <label for="namesFile">שמות 파일 업로드 (형식: 이름|성)</label>
</div>
// === [추가 코드] 언어 변경 및 이름 업데이트 ===
function changeLanguage() {
  const selectedLang = document.getElementById('languageSelector').value;
  BAS.sendCommand('ChangeLanguage', { SelectedLanguage: selectedLang });
}

function updateGmailName() {
  const file = document.getElementById('namesFile').files[0];
  const reader = new FileReader();
  
  reader.onload = function(e) {
    BAS.setVariable('NamesFilePath', e.target.result);
    BAS.sendCommand('UpdateGmailName');
  };
  
  reader.readAsText(file);
}
// === [추가 코드] 언어 변경 및 이름 업데이트 ===
function changeLanguage() {
  const selectedLang = document.getElementById('languageSelector').value;
  BAS.sendCommand('ChangeLanguage', { SelectedLanguage: selectedLang });
}

function updateGmailName() {
  const file = document.getElementById('namesFile').files[0];
  const reader = new FileReader();
  
  reader.onload = function(e) {
    BAS.setVariable('NamesFilePath', e.target.result);
    BAS.sendCommand('UpdateGmailName');
  };
  
  reader.readAsText(file);
}
<!-- === [추가 코드] 도움말 팝업 === -->
<div class="help-modal">
  <h3>💡 사용법 안내</h3>
  <p><strong>1. 언어 설정:</strong> 드롭다운에서 원하는 언어 선택 → 적용 버튼 클릭</p>
  <p><strong>2. 이름/성 갱신:</strong> '이름|성' 형식의 텍스트 파일 업로드 후 갱신 버튼 클릭</p>
  <p><strong>3. 프로필 사진:</strong> ./avatars 폴더에 사진 추가 (확장자: .jpg)</p>
</div>
<macro name="SetKoreanLanguage">
  <action name="Navigate">
    <Url>https://www.youtube.com/account_prefs</Url>
  </action>
  <action name="Click">
    <Selector>button[name='language']</Selector>
  </action>
  <action name="Select">
    <Selector>select[name='language']</Selector>
    <Value>한국어</Value>
  </action>
  <action name="Click">
    <Selector>button[type='submit'][value='저장']</Selector>
  </action>
</macro>
<macro name="SetKoreanRegion">
  <action name="Navigate">
    <Url>https://myaccount.google.com/location</Url>
  </action>
  <action name="Click">
    <Selector>button[name='country']</Selector>
  </action>
  <action name="Select">
    <Selector>select[name='country']</Selector>
    <Value>대한민국</Value>
  </action>
  <action name="Click">
    <Selector>button[type='submit'][value='저장']</Selector>
  </action>
</macro>
<macro name="ApplyKoreanProxy">
  <action name="ReadFile">
    <File>./proxies.txt</File>
    <Variable>ProxyList</Variable>
  </action>
  <action name="FilterProxies">
    <Condition>IP contains '158.247.' or IP contains '141.164.'</Condition>
    <Variable>KoreanProxies</Variable>
  </action>
  <action name="SetProxy">
    <Source>List</Source>
    <List>{KoreanProxies}</List>
  </action>
</macro>
<macro name="CreateAccountWithKoreanSettings">
  <call macro="CreateGmailAccount"/>
  <call macro="SetKoreanLanguage"/>
  <call macro="SetKoreanRegion"/>
  <call macro="ApplyKoreanProxy"/>
</macro>
<action name="AddButton">
  <Label>🇰🇷 한국어로 변경</Label>
  <OnClick>
    <call macro="SetKoreanLanguage"/>
    <call macro="SetKoreanRegion"/>
  </OnClick>
</action>
<macro name="ApplyKoreanProxy">
  <action name="ReadFile">
    <File>./proxies/korea_random.txt</File>
    <Variable>ProxyList</Variable>
  </action>
  <action name="FilterProxies">
    <Condition>IP contains '158.247.' or IP contains '141.164.'</Condition>
    <Variable>KoreanProxies</Variable>
  </action>
  <action name="SetProxy">
    <Source>List</Source>
    <List>{KoreanProxies}</List>
  </action>
  <action name="LogEvent">
    <Type>ProxyApplied</Type>
    <Details>국가=한국, ISP={ExtractText(ProxyList, 'SKT|KT|LGU+', 'skt|kt|lgu')}, IP={ProxyIP}:{ProxyPort}</Details>
  </action>
</macro>
<macro name="SetKoreanLanguage">
  <!-- 유튜브 언어 설정 -->
  <action name="Navigate">
    <Url>https://www.youtube.com/account_preferences</Url>
  </action>
  <action name="Click">
    <Selector>select[name='language']</Selector>
  </action>
  <action name="Select">
    <Selector>select[name='language']</Selector>
    <Value>한국어</Value>
  </action>
  <action name="Click">
    <Selector>button[type='submit'][value='저장']</Selector>
  </action>
  
  <!-- 지메일 언어 설정 -->
  <action name="Navigate">
    <Url>https://myaccount.google.com/language</Url>
  </action>
  <action name="Click">
    <Selector>div[class='selectContainer']</Selector>
  </action>
  <action name="Click">
    <Selector>span[text()='한국어']</Selector>
  </action>
  <action name="LogEvent">
    <Type>LanguageSet</Type>
    <Details>언어 설정 완료: 한국어</Details>
  </action>
</macro>
<macro name="ManageAccountAndProxy">
  <!-- 계정 생성 시 언어 설정 -->
  <call macro="CreateGmailAccount"/>
  <call macro="SetKoreanLanguage"/>
  
  <!-- 프록시 설정 -->
  <call macro="ApplyKoreanProxy"/>
  
  <!-- 계정 정보 업데이트 -->
  <action name="UpdateDatabase">
    <Table>gmail_accounts</Table>
    <Columns>Gmail_Username, Gmail_Passwords, Recovery_Email, Gmail_2FA, Current_IP, Current_ISP</Columns>
    <Values>{Account.id}|{Account.pass}|{Account.recovery_email}|{Account.recovery_pass}|{ProxyIP}:{ProxyPort}|{ExtractText(ProxyList, 'SKT|KT|LGU+', 'skt|kt|lgu')}</Values>
  </action>
</macro>
<macro name="CaptchaBypass">
  <If condition="document.title.includes('캡차') or document.querySelector('img[src*='captcha']')">
    <Then>
      <action name="RotateProxy">
        <ProxyList>./proxies/korea_random.txt</ProxyList>
        <Delay>5000</Delay>
      </action>
      <action name="LogEvent">
        <Type>CaptchaDetected</Type>
        <Details>캡차 감지 → 프록시 회전</Details>
      </action>
      <action name="RestartBrowser"/>
    </Then>
  </If>
</macro>
<div class="language-section">
  <h3>🌐 언어 설정</h3>
  <div class="button-group">
    <button onclick="setKoreanLanguage()">🇰🇷 기본 한국어 설정</button>
    <button onclick="showLanguageSelector()">🌍 언어 변경</button>
  </div>
</div>

<!-- 다국어 선택 모달 -->
<div id="languageModal" class="modal">
  <div class="modal-content">
    <span onclick="closeModal('languageModal')" class="close-btn">×</span>
    <h2>🌍 언어 변경</h2>
    <select id="languageSelector">
      <option value="한국어">🇰🇷 한국어</option>
      <option value="English">🇺🇸 English</option>
      <option value="Bahasa Indonesia">🇮🇩 Bahasa Indonesia</option>
      <option value="Русский">🇷🇺 Русский</option>
    </select>
    <button onclick="applyLanguage()">💾 적용</button>
    <div class="info-message">
      <p>💡 선택한 언어로 YouTube 및 지메일을 변경합니다.</p>
    </div>
  </div>
</div>
// 언어 설정 모달 표시
function showLanguageSelector() {
  document.getElementById('languageModal').style.display = 'flex';
}

// 기본 한국어 설정
function setKoreanLanguage() {
  BAS.sendCommand('SetKoreanLanguage');
  updateLog('🇰🇷 기본 언어 설정: 한국어로 변경 중...');
}

// 선택한 언어 적용
function applyLanguage() {
  const selectedLang = document.getElementById('languageSelector').value;
  BAS.sendCommand('ChangeLanguage', { SelectedLanguage: selectedLang });
  updateLog(`🌍 ${selectedLang}로 언어 변경 중...`);
  closeModal('languageModal');
}

// 모달 닫기
function closeModal(modalId) {
  document.getElementById(modalId).style.display = 'none';
}
<macro name="Report_GenerateFiles">
  <action name="CreateFolder">
    <Name>account_checker_reporter</Name>
  </action>
  <If condition="LoginSuccess">
    <Then>
      <action name="CreateFile">
        <Name>login_success_gmail_proxy.txt</Name>
        <Header>id|pass|recovery|recovery_pass|proxy|isp</Header>
        <Data>{Account.id}|{Account.pass}|{Account.recovery_email}|{Account.recovery_pass}|{CURRENT_PROXY}|{ExtractText(ProxyList, 'SKT|KT|LGU+', 'skt|kt|lgu')}</Data>
      </action>
    </Then>
  </If>
  <If condition="BadProxy">
    <Then>
      <action name="CreateFile">
        <Name>bad_proxy.txt</Name>
        <Header>proxy</Header>
        <Data>{CURRENT_PROXY}</Data>
      </action>
    </Then>
  </If>
  <If condition="DisabledAccount">
    <Then>
      <action name="CreateFile">
        <Name>disabled_accounts.txt</Name>
        <Header>id|pass|recovery|recovery_pass|proxy|isp</Header>
        <Data>{Account.id}|{Account.pass}|{Account.recovery_email}|{Account.recovery_pass}|{CURRENT_PROXY}|{ExtractText(ProxyList, 'SKT|KT|LGU+', 'skt|kt|lgu')}</Data>
      </action>
    </Then>
  </If>
  <If condition="PhoneVerificationNeeded">
    <Then>
      <action name="CreateFile">
        <Name>phone_verification_needed.txt</Name>
        <Header>id|pass|recovery|recovery_pass|proxy|isp</Header>
        <Data>{Account.id}|{Account.pass}|{Account.recovery_email}|{Account.recovery_pass}|{CURRENT_PROXY}|{ExtractText(ProxyList, 'SKT|KT|LGU+', 'skt|kt|lgu')}</Data>
      </action>
    </Then>
  </If>
</macro>
<!-- === [핵심 코드] 키워드 검색 및 랭킹 상승 === -->
<macro name="KeywordRankingBoost">
  <action name="SetVariable">
    <Variable>TargetKeyword</Variable>
    <Value>{RandomLine('./data/ranking_keywords.txt')}</Value>
  </action>
  
  <!-- 유튜브 접속 -->
  <action name="Navigate">
    <Url>https://www.youtube.com</Url>
  </action>
  
  <!-- 로그인 (필요 시) -->
  <If condition="!IsLoggedIn">
    <Then>
      <call macro="LoginToGoogle"/>
    </Then>
  </If>
  
  <!-- 키워드 검색 -->
  <action name="Type">
    <Selector>input[placeholder='검색']</Selector>
    <Text>{TargetKeyword}</Text>
  </action>
  
  <!-- 검색 버튼 클릭 -->
  <action name="Click">
    <Selector>button[aria-label='검색']</Selector>
  </action>
  
  <!-- 라이브/ショーツ/비디오 필터 선택 -->
  <If condition="TargetType == 'Live'">
    <Then>
      <action name="Click">
        <Selector>a[href*='/results?search_query={TargetKeyword}&sp=EgIQAw%253D%253D']</Selector>
      </action>
    </Then>
  </If>
  <If condition="TargetType == 'Shorts'">
    <Then>
      <action name="Click">
        <Selector>a[href*='/results?search_query={TargetKeyword}&sp=EgIQAQ%253D%253D']</Selector>
      </action>
    </Then>
  </If>
  <If condition="TargetType == 'Video'">
    <Then>
      <action name="Click">
        <Selector>a[href*='/results?search_query={TargetKeyword}&sp=EgIIBQ%253D%253D']</Selector>
      </action>
    </Then>
  </If>
  
  <!-- 대상 URL 찾기 -->
  <action name="FindTargetURL">
    <TargetURL>{TargetURL}</TargetURL>
    <MaxAttempts>300</MaxAttempts>
  </action>
  
  <!-- URL 발견 시 클릭 -->
  <If condition="TargetURLFound">
    <Then>
      <action name="Click">
        <Selector>//a[contains(@href, '{TargetURL}')]</Selector>
      </action>
      
      <!-- 시청 시간 설정 -->
      <action name="SetVariable">
        <Variable>ViewTime</Variable>
        <Value>{Random(600, 3600)}</Value>
      </action>
      
      <!-- 시청 시작 -->
      <action name="WatchVideo">
        <Duration>{ViewTime}</Duration>
      </action>
      
      <!-- 상호작용 (좋아요, 댓글, 구독) -->
      <If condition="{Random(1,100)} > 70">
        <Then>
          <action name="Click">
            <Selector>#segmented-like-button button</Selector>
          </action>
        </Then>
      </If>
      <If condition="{Random(1,100)} > 50">
        <Then>
          <action name="Type">
            <Selector>#contenteditable-root</Selector>
            <Text>{RandomLine('./data/comments.txt')}</Text>
          </action>
          <action name="Click">
            <Selector>#submit-button</Selector>
          </action>
        </Then>
      </If>
      <If condition="{Random(1,100)} > 30">
        <Then>
          <action name="Click">
            <Selector>#subscribe-button</Selector>
          </action>
        </Then>
      </If>
      
      <!-- 성공 로그 기록 -->
      <action name="LogEvent">
        <Type>KeywordRankingBoost</Type>
        <Details>Clicked {TargetURL} for keyword '{TargetKeyword}'</Details>
      </action>
    </Then>
  </If>
  
  <!-- URL 발견 실패 시 오류 로그 -->
  <Else>
    <action name="LogEvent">
      <Type>Error</Type>
      <Details>URL not found in top 300 results: {TargetURL}</Details>
    </action>
  </Else>
</macro>
<!-- === [UI 업데이트] 키워드 검색 및 랭킹 상승 === -->
<div class="keyword-ranking-section">
  <h3>🔥 키워드 랭킹 상승</h3>
  <div class="input-group">
    <label>키워드 파일:
      <input type="file" id="ranking-keywords-file" accept=".txt">
    </label>
  </div>
  <div class="input-group">
    <label>대상 URL:
      <input type="text" id="target-url" placeholder="https://www.youtube.com/watch?v=...">
    </label>
  </div>
  <div class="input-group">
    <label>컨텐츠 유형:
      <select id="target-type">
        <option value="Live">라이브</option>
        <option value="Shorts">ショーツ (Shorts)</option>
        <option value="Video">비디오</option>
      </select>
    </label>
  </div>
  <div class="button-group">
    <button onclick="boostKeywordRanking()">🚀 키워드 1등 상승</button>
  </div>
</div>
// === [JavaScript] 키워드 랭킹 상승 ===
function boostKeywordRanking() {
  const keywordsFile = document.getElementById('ranking-keywords-file').files[0];
  const targetURL = document.getElementById('target-url').value;
  const targetType = document.getElementById('target-type').value;
  
  if (!keywordsFile || !targetURL) {
    alert('키워드 파일과 대상 URL을 입력해주세요.');
    return;
  }
  
  const reader = new FileReader();
  
  reader.onload = function(e) {
    const keywords = e.target.result.split('\n').map(keyword => keyword.trim()).filter(keyword => keyword !== '');
    BAS.setVariable('ranking_keywords', keywords);
    BAS.setVariable('TargetURL', targetURL);
    BAS.setVariable('TargetType', targetType);
    
    keywords.forEach(keyword => {
      BAS.sendCommand('KeywordRankingBoost', { TargetKeyword: keyword });
    });
  };
  
  reader.readAsText(keywordsFile);
}
<macro name="Report_GenerateFiles">
  <action name="CreateFolder">
    <Name>account_checker_reporter</Name>
  </action>
  
  <If condition="LoginSuccess">
    <Then>
      <action name="CreateFile">
        <Name>login_success_gmail_proxy.txt</Name>
        <Header>id|pass|recovery|recovery_pass|proxy|isp</Header>
        <Data>{Account.id}|{Account.pass}|{Account.recovery_email}|{Account.recovery_pass}|{CURRENT_PROXY}|{ExtractText(ProxyList, 'SKT|KT|LGU+', 'skt|kt|lgu')}</Data>
      </action>
    </Then>
  </If>
  
  <If condition="BadProxy">
    <Then>
      <action name="CreateFile">
        <Name>bad_proxy.txt</Name>
        <Header>proxy</Header>
        <Data>{CURRENT_PROXY}</Data>
      </action>
    </Then>
  </If>
  
  <If condition="DisabledAccount">
    <Then>
      <action name="CreateFile">
        <Name>disabled_accounts.txt</Name>
        <Header>id|pass|recovery|recovery_pass</Header>
        <Data>{Account.id}|{Account.pass}|{Account.recovery_email}|{Account.recovery_pass}</Data>
      </action>
    </Then>
  </If>
  
  <If condition="PhoneVerificationNeeded">
    <Then>
      <action name="CreateFile">
        <Name>phone_verification_needed.txt</Name>
        <Header>id|pass|recovery|recovery_pass|proxy</Header>
        <Data>{Account.id}|{Account.pass}|{Account.recovery_email}|{Account.recovery_pass}|{CURRENT_PROXY}</Data>
      </action>
    </Then>
  </If>
  
  <If condition="TargetURLFound">
    <Then>
      <action name="CreateFile">
        <Name>ranking_boosted.txt</Name>
        <Header>keyword|url|view_time</Header>
        <Data>{TargetKeyword}|{TargetURL}|{ViewTime}</Data>
      </action>
    </Then>
  </If>
</macro>
<macro name="LoginToGoogle">
  <action name="Navigate">
    <Url>https://accounts.google.com/signin</Url>
  </action>
  
  <action name="Type">
    <Selector>input[type='email'][name='identifier']</Selector>
    <Text>{Account.id}</Text>
  </action>
  
  <action name="Click">
    <Selector>#identifierNext button</Selector>
  </action>
  
  <action name="Type">
    <Selector>input[type='password'][name='Passwd']</Selector>
    <Text>{Account.pass}</Text>
  </action>
  
  <action name="Click">
    <Selector>#passwordNext button</Selector>
  </action>
  
  <!-- 2FA 인증 (필요 시) -->
  <If condition="2FARequired">
    <Then>
      <call macro="Gmail_RequestSMSVerification"/>
      <call macro="Gmail_WaitForSMSCode"/>
    </Then>
  </If>
</macro>
<macro name="Gmail_RequestSMSVerification">
  <action name="CallAPI">
    <URL>https://sms-activate.ru/stubs/handler_api.php?api_key={SMS_API_KEY}&amp;action=getNumber&amp;service=gm</URL>
    <Method>GET</Method>
    <Variable>SMSResponse</Variable>
  </action>
  
  <action name="ExtractText">
    <Text>{SMSResponse}</Text>
    <Variable>SMSID</Variable>
    <Regex>ACCESS_NUMBER:(\d+):</Regex>
  </action>
  
  <action name="LogEvent">
    <Type>SMSRequested</Type>
    <Details>SMS 인증 요청됨. ID: {SMSID}</Details>
  </action>
  
  <call macro="Gmail_WaitForSMSCode"/>
</macro>

<macro name="Gmail_WaitForSMSCode">
  <loop name="PollSMS" count="30">
    <action name="CallAPI">
      <URL>https://sms-activate.ru/stubs/handler_api.php?api_key={SMS_API_KEY}&amp;action=getStatus&amp;id={SMSID}</URL>
      <Method>GET</Method>
      <Variable>SMSStatus</Variable>
    </action>
    
    <If condition="SMSStatus.includes('STATUS_OK')">
      <Then>
        <action name="ExtractText">
          <Text>{SMSStatus}</Text>
          <Variable>SMSCode</Variable>
          <Regex>STATUS_OK:(\d+)</Regex>
        </action>
        
        <action name="Type">
          <Selector>input[type='text'], #code</Selector>
          <Text>{SMSCode}</Text>
        </action>
        
        <action name="Click">
          <Selector>button[type='submit'], #submit</Selector>
        </action>
        
        <action name="BreakLoop"/>
      </Then>
    </If>
    
    <action name="Delay">
      <Min>3000</Min>
      <Max>4000</Max>
    </action>
  </loop>
</macro>
<macro name="ApplyKoreanProxy">
  <action name="ReadFile">
    <File>./proxies/korea_random.txt</File>
    <Variable>ProxyList</Variable>
  </action>
  
  <action name="FilterProxies">
    <Condition>IP contains '158.247.' or IP contains '141.164.'</Condition>
    <Variable>KoreanProxies</Variable>
  </action>
  
  <action name="SetProxy">
    <Source>List</Source>
    <List>{KoreanProxies}</List>
  </action>
  
  <action name="LogEvent">
    <Type>ProxyApplied</Type>
    <Details>국가=한국, ISP={ExtractText(ProxyList, 'SKT|KT|LGU+', 'skt|kt|lgu')}, IP={ProxyIP}:{ProxyPort}</Details>
  </action>
</macro>
<macro name="SetKoreanLanguage">
  <!-- 유튜브 언어 설정 -->
  <action name="Navigate">
    <Url>https://www.youtube.com/account_preferences</Url>
  </action>
  
  <action name="Click">
    <Selector>select[name='language']</Selector>
  </action>
  
  <action name="Select">
    <Selector>select[name='language']</Selector>
    <Value>한국어</Value>
  </action>
  
  <action name="Click">
    <Selector>button[type='submit'][value='저장']</Selector>
  </action>
  
  <!-- 지메일 언어 설정 -->
  <action name="Navigate">
    <Url>https://myaccount.google.com/language</Url>
  </action>
  
  <action name="Click">
    <Selector>div[class='selectContainer']</Selector>
  </action>
  
  <action name="Click">
    <Selector>span[text()='한국어']</Selector>
  </action>
  
  <action name="LogEvent">
    <Type>LanguageSet</Type>
    <Details>언어 설정 완료: 한국어</Details>
  </action>
</macro>
<macro name="CaptchaBypass">
  <If condition="CAPTCHA_DETECTED">
    <Then>
      <action name="RotateProxy">
        <ProxyList>./proxies/korea_random.txt</ProxyList>
        <Delay>5000</Delay>
      </action>
      
      <action name="LogEvent">
        <Type>CaptchaDetected</Type>
        <Details>캡차 감지 → 프록시 회전</Details>
      </action>
      
      <action name="RestartBrowser"/>
    </Then>
  </If>
</macro>
<settings>
  <ProxyRotationInterval>300</ProxyRotationInterval> <!-- 5분마다 회전 -->
</settings>
<macro name="LoginAndSetup">
  <call macro="LoginToGoogle"/>
  <call macro="SetKoreanLanguage"/>
  <call macro="ApplyKoreanProxy"/>
</macro>
<!-- === [최종 UI 코드] === -->
<style>
  :root {
    --primary: #1a1a1a;
    --secondary: #00ff99;
    --accent: #ff4757;
    --text: #e6e6e6;
    --input-bg: #2c2c2c;
    --gradient: linear-gradient(135deg, var(--primary), var(--secondary));
  }

  body {
    background: var(--primary);
    color: var(--text);
    font-family: 'Segoe UI', sans-serif;
  }

  .container {
    max-width: 1200px;
    margin: 20px auto;
    padding: 30px;
    border-radius: 15px;
    background: var(--gradient);
  }

  .button
  <!-- === [핵심 코드] 키워드 검색 및 순위 상승 === -->
<macro name="KeywordRankingBoost">
  <action name="SetVariable">
    <Variable>TargetKeyword</Variable>
    <Value>{RandomLine('./data/ranking_keywords.txt')}</Value>
  </action>
  
  <!-- 유튜브 접속 -->
  <action name="Navigate">
    <Url>https://www.youtube.com</Url>
  </action>
  
  <!-- 로그인 (필요 시) -->
  <If condition="!IsLoggedIn">
    <Then>
      <call macro="LoginToGoogle"/>
    </Then>
  </If>
  
  <!-- 키워드 검색 -->
  <action name="Type">
    <Selector>input[placeholder='검색']</Selector>
    <Text>{TargetKeyword}</Text>
  </action>
  
  <!-- 검색 버튼 클릭 -->
  <action name="Click">
    <Selector>button[aria-label='검색']</Selector>
  </action>
  
  <!-- 콘텐츠 유형 필터 선택 -->
  <If condition="TargetType == 'Live'">
    <Then>
      <action name="Click">
        <Selector>a[href*='/results?search_query={TargetKeyword}&sp=EgIQAw%253D%253D']</Selector>
      </action>
    </Then>
  </If>
  <If condition="TargetType == 'Shorts'">
    <Then>
      <action name="Click">
        <Selector>a[href*='/results?search_query={TargetKeyword}&sp=EgIQAQ%253D%253D']</Selector>
      </action>
    </Then>
  </If>
  <If condition="TargetType == 'Video'">
    <Then>
      <action name="Click">
        <Selector>a[href*='/results?search_query={TargetKeyword}&sp=EgIIBQ%253D%253D']</Selector>
      </action>
    </Then>
  </If>
  
  <!-- 대상 URL 찾기 -->
  <action name="FindTargetURL">
    <TargetURL>{TargetURL}</TargetURL>
    <MaxAttempts>300</MaxAttempts>
  </action>
  
  <!-- URL 발견 시 클릭 -->
  <If condition="TargetURLFound">
    <Then>
      <action name="Click">
        <Selector>//a[contains(@href, '{TargetURL}')]</Selector>
      </action>
      
      <!-- 시청 시간 설정 -->
      <action name="SetVariable">
        <Variable>ViewTime</Variable>
        <Value>{Random(600, 3600)}</Value>
      </action>
      
      <!-- 시청 시작 -->
      <action name="WatchVideo">
        <Duration>{ViewTime}</Duration>
      </action>
      
      <!-- 상호작용 (좋아요, 댓글, 구독) -->
      <If condition="{Random(1,100)} > 70">
        <Then>
          <action name="Click">
            <Selector>#segmented-like-button button</Selector>
          </action>
        </Then>
      </If>
      <If condition="{Random(1,100)} > 50">
        <Then>
          <action name="Type">
            <Selector>#contenteditable-root</Selector>
            <Text>{RandomLine('./data/comments.txt')}</Text>
          </action>
          <action name="Click">
            <Selector>#submit-button</Selector>
          </action>
        </Then>
      </If>
      <If condition="{Random(1,100)} > 30">
        <Then>
          <action name="Click">
            <Selector>#subscribe-button</Selector>
          </action>
        </Then>
      </If>
      
      <!-- 성공 로그 기록 -->
      <action name="LogEvent">
        <Type>KeywordRankingBoost</Type>
        <Details>Clicked {TargetURL} for keyword '{TargetKeyword}'</Details>
      </action>
      
      <!-- 로그 파일 생성 -->
      <action name="CreateFile">
        <Name>ranking_boosted.txt</Name>
        <Header>keyword|url|view_time</Header>
        <Data>{TargetKeyword}|{TargetURL}|{ViewTime}</Data>
      </action>
    </Then>
  </If>
  
  <!-- URL 발견 실패 시 오류 로그 -->
  <Else>
    <action name="LogEvent">
      <Type>Error</Type>
      <Details>URL not found in top 300 results: {TargetURL}</Details>
    </action>
    <action name="CreateFile">
      <Name>url_not_found.txt</Name>
      <Header>keyword|url</Header>
      <Data>{TargetKeyword}|{TargetURL}</Data>
    </action>
  </Else>
</macro>
<!-- === [UI 업데이트] 키워드 검색 및 랭킹 상승 === -->
<div class="keyword-ranking-section">
  <h3>🔥 키워드 랭킹 상승</h3>
  <div class="input-group">
    <label>키워드 파일:
      <input type="file" id="ranking-keywords-file" accept=".txt">
    </label>
  </div>
  <div class="input-group">
    <label>대상 URL:
      <input type="text" id="target-url" placeholder="https://www.youtube.com/watch?v=...">
    </label>
  </div>
  <div class="input-group">
    <label>컨텐츠 유형:
      <select id="target-type">
        <option value="Live">라이브</option>
        <option value="Shorts">ショーツ (Shorts)</option>
        <option value="Video">비디오</option>
      </select>
    </label>
  </div>
  <div class="button-group">
    <button onclick="boostKeywordRanking()">🚀 키워드 1등 상승</button>
  </div>
</div>
// === [JavaScript] 키워드 랭킹 상승 ===
function boostKeywordRanking() {
  const keywordsFile = document.getElementById('ranking-keywords-file').files[0];
  const targetURL = document.getElementById('target-url').value;
  const targetType = document.getElementById('target-type').value;
  
  if (!keywordsFile || !targetURL) {
    alert('키워드 파일과 대상 URL을 입력해주세요.');
    return;
  }
  
  const reader = new FileReader();
  
  reader.onload = function(e) {
    const keywords = e.target.result.split('\n').map(keyword => keyword.trim()).filter(keyword => keyword !== '');
    BAS.setVariable('ranking_keywords', keywords);
    BAS.setVariable('TargetURL', targetURL);
    BAS.setVariable('TargetType', targetType);
    
    keywords.forEach(keyword => {
      BAS.sendCommand('KeywordRankingBoost', { TargetKeyword: keyword });
    });
  };
  
  reader.readAsText(keywordsFile);
}
<macro name="Report_GenerateFiles">
  <action name="CreateFolder">
    <Name>account_checker_reporter</Name>
  </action>
  
  <If condition="LoginSuccess">
    <Then>
      <action name="CreateFile">
        <Name>login_success_gmail_proxy.txt</Name>
        <Header>id|pass|recovery|recovery_pass|proxy|isp</Header>
        <Data>{Account.id}|{Account.pass}|{Account.recovery_email}|{Account.recovery_pass}|{CURRENT_PROXY}|{ExtractText(ProxyList, 'SKT|KT|LGU+', 'skt|kt|lgu')}</Data>
      </action>
    </Then>
  </If>
  
  <If condition="BadProxy">
    <Then>
      <action name="CreateFile">
        <Name>bad_proxy.txt</Name>
        <Header>proxy</Header>
        <Data>{CURRENT_PROXY}</Data>
      </action>
    </Then>
  </If>
  
  <If condition="DisabledAccount">
    <Then>
      <action name="CreateFile">
        <Name>disabled_accounts.txt</Name>
        <Header>id|pass|recovery|recovery_pass</Header>
        <Data>{Account.id}|{Account.pass}|{Account.recovery_email}|{Account.recovery_pass}</Data>
      </action>
    </Then>
  </If>
  
  <If condition="PhoneVerificationNeeded">
    <Then>
      <action name="CreateFile">
        <Name>phone_verification_needed.txt</Name>
        <Header>id|pass|recovery|recovery_pass|proxy</Header>
        <Data>{Account.id}|{Account.pass}|{Account.recovery_email}|{Account.recovery_pass}|{CURRENT_PROXY}</Data>
      </action>
    </Then>
  </If>
  
  <If condition="TargetURLFound">
    <Then>
      <action name="CreateFile">
        <Name>ranking_boosted.txt</Name>
        <Header>keyword|url|view_time</Header>
        <Data>{TargetKeyword}|{TargetURL}|{ViewTime}</Data>
      </action>
    </Then>
  </If>
</macro>
<macro name="LoginToGoogle">
  <action name="Navigate">
    <Url>https://accounts.google.com/signin</Url>
  </action>
  
  <action name="Type">
    <Selector>input[type='email'][name='identifier']</Selector>
    <Text>{Account.id}</Text>
  </action>
  
  <action name="Click">
    <Selector>#identifierNext button</Selector>
  </action>
  
  <action name="Type">
    <Selector>input[type='password'][name='Passwd']</Selector>
    <Text>{Account.pass}</Text>
  </action>
  
  <action name="Click">
    <Selector>#passwordNext button</Selector>
  </action>
  
  <!-- 2FA 인증 (필요 시) -->
  <If condition="2FARequired">
    <Then>
      <call macro="Gmail_RequestSMSVerification"/>
      <call macro="Gmail_WaitForSMSCode"/>
    </Then>
  </If>
</macro>
<macro name="Gmail_RequestSMSVerification">
  <action name="CallAPI">
    <URL>https://sms-activate.ru/stubs/handler_api.php?api_key={SMS_API_KEY}&amp;action=getNumber&amp;service=gm</URL>
    <Method>GET</Method>
    <Variable>SMSResponse</Variable>
  </action>
  
  <action name="ExtractText">
    <Text>{SMSResponse}</Text>
    <Variable>SMSID</Variable>
    <Regex>ACCESS_NUMBER:(\d+):</Regex>
  </action>
  
  <action name="LogEvent">
    <Type>SMSRequested</Type>
    <Details>SMS 인증 요청됨. ID: {SMSID}</Details>
  </action>
  
  <call macro="Gmail_WaitForSMSCode"/>
</macro>

<macro name="Gmail_WaitForSMSCode">
  <loop name="PollSMS" count="30">
    <action name="CallAPI">
      <URL>https://sms-activate.ru/stubs/handler_api.php?api_key={SMS_API_KEY}&amp;action=getStatus&amp;id={SMSID}</URL>
      <Method>GET</Method>
      <Variable>SMSStatus</Variable>
    </action>
    
    <If condition="SMSStatus.includes('STATUS_OK')">
      <Then>
        <action name="ExtractText">
          <Text>{SMSStatus}</Text>
          <Variable>SMSCode</Variable>
          <Regex>STATUS_OK:(\d+)</Regex>
        </action>
        
        <action name="Type">
          <Selector>input[type='text'], #code</Selector>
          <Text>{SMSCode}</Text>
        </action>
        
        <action name="Click">
          <Selector>button[type='submit'], #submit</Selector>
        </action>
        
        <action name="BreakLoop"/>
      </Then>
    </If>
    
    <action name="Delay">
      <Min>3000</Min>
      <Max>4000</Max>
    </action>
  </loop>
</macro>
<macro name="ApplyKoreanProxy">
  <action name="ReadFile">
    <File>./proxies/korea_random.txt</File>
    <Variable>ProxyList</Variable>
  </action>
  
  <action name="FilterProxies">
    <Condition>IP contains '158.247.' or IP contains '141.164.'</Condition>
    <Variable>KoreanProxies</Variable>
  </action>
  
  <action name="SetProxy">
    <Source>List</Source>
    <List>{KoreanProxies}</List>
  </action>
  
  <action name="LogEvent">
    <Type>ProxyApplied</Type>
    <Details>국가=한국, ISP={ExtractText(ProxyList, 'SKT|KT|LGU+', 'skt|kt|lgu')}, IP={ProxyIP}:{ProxyPort}</Details>
  </action>
</macro>